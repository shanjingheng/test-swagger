/**
 * Hyphenate REST APIs
 * Hyphenate Server REST API Swagger is designated to provide better documentation and thorough interfaces for testing. For more details about server implementation, request rate limitation, etc, please visit [Hyphenate Server Integration](http://docs.hyphenate.io/v1.0/docs/server-overview).    **Note:**  `org_ID` is the unique ID of the organization created when you first registered [Hyphenate console](https://console.hyphenate.io/).                          `app_name` is the unique app ID created when you new application in [Hyphenate console](https://console.hyphenate.io/).            `Authorization token` is required for most API requests as part of requesting header in the format `Bearer ${token}`. You can obtain the token via [/{org_name}/{app_name}/token](https://docs.hyphenate.io/docs/server-overview#section-request-authentication-token).                                             
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ModifyChatroom', 'model/UserNames', 'model/Chatroom'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ModifyChatroom'), require('../model/UserNames'), require('../model/Chatroom'));
  } else {
    // Browser globals (root is window)
    if (!root.HyphenateRestApIs) {
      root.HyphenateRestApIs = {};
    }
    root.HyphenateRestApIs.ChatRoomsApi = factory(root.HyphenateRestApIs.ApiClient, root.HyphenateRestApIs.ModifyChatroom, root.HyphenateRestApIs.UserNames, root.HyphenateRestApIs.Chatroom);
  }
}(this, function(ApiClient, ModifyChatroom, UserNames, Chatroom) {
  'use strict';

  /**
   * ChatRooms service.
   * @module api/ChatRoomsApi
   * @version 1.0.2
   */

  /**
   * Constructs a new ChatRoomsApi. 
   * @alias module:api/ChatRoomsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the orgNameAppNameChatroomsChatroomIdDelete operation.
     * @callback module:api/ChatRoomsApi~orgNameAppNameChatroomsChatroomIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Chat Room
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} chatroomId 
     * @param {module:api/ChatRoomsApi~orgNameAppNameChatroomsChatroomIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatroomsChatroomIdDelete = function(orgName, appName, authorization, chatroomId, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatroomsChatroomIdDelete";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatroomsChatroomIdDelete";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatroomsChatroomIdDelete";
      }

      // verify the required parameter 'chatroomId' is set
      if (chatroomId == undefined || chatroomId == null) {
        throw "Missing the required parameter 'chatroomId' when calling orgNameAppNameChatroomsChatroomIdDelete";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'chatroom_id': chatroomId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatrooms/{chatroom_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatroomsChatroomIdGet operation.
     * @callback module:api/ChatRoomsApi~orgNameAppNameChatroomsChatroomIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Chat Room Details
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} chatroomId 
     * @param {module:api/ChatRoomsApi~orgNameAppNameChatroomsChatroomIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatroomsChatroomIdGet = function(orgName, appName, authorization, chatroomId, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatroomsChatroomIdGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatroomsChatroomIdGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatroomsChatroomIdGet";
      }

      // verify the required parameter 'chatroomId' is set
      if (chatroomId == undefined || chatroomId == null) {
        throw "Missing the required parameter 'chatroomId' when calling orgNameAppNameChatroomsChatroomIdGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'chatroom_id': chatroomId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatrooms/{chatroom_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatroomsChatroomIdPut operation.
     * @callback module:api/ChatRoomsApi~orgNameAppNameChatroomsChatroomIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Chat Room Details
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} chatroomId 
     * @param {module:model/ModifyChatroom} body 
     * @param {module:api/ChatRoomsApi~orgNameAppNameChatroomsChatroomIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatroomsChatroomIdPut = function(orgName, appName, authorization, chatroomId, body, callback) {
      var postBody = body;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatroomsChatroomIdPut";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatroomsChatroomIdPut";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatroomsChatroomIdPut";
      }

      // verify the required parameter 'chatroomId' is set
      if (chatroomId == undefined || chatroomId == null) {
        throw "Missing the required parameter 'chatroomId' when calling orgNameAppNameChatroomsChatroomIdPut";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling orgNameAppNameChatroomsChatroomIdPut";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'chatroom_id': chatroomId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatrooms/{chatroom_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatroomsChatroomIdUsersPost operation.
     * @callback module:api/ChatRoomsApi~orgNameAppNameChatroomsChatroomIdUsersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Chat Room Members in Batch
     * Add max 60 group members at a time.
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} chatroomId 
     * @param {module:model/UserNames} content 
     * @param {module:api/ChatRoomsApi~orgNameAppNameChatroomsChatroomIdUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatroomsChatroomIdUsersPost = function(orgName, appName, authorization, chatroomId, content, callback) {
      var postBody = content;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatroomsChatroomIdUsersPost";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatroomsChatroomIdUsersPost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatroomsChatroomIdUsersPost";
      }

      // verify the required parameter 'chatroomId' is set
      if (chatroomId == undefined || chatroomId == null) {
        throw "Missing the required parameter 'chatroomId' when calling orgNameAppNameChatroomsChatroomIdUsersPost";
      }

      // verify the required parameter 'content' is set
      if (content == undefined || content == null) {
        throw "Missing the required parameter 'content' when calling orgNameAppNameChatroomsChatroomIdUsersPost";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'chatroom_id': chatroomId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatrooms/{chatroom_id}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatroomsChatroomIdUsersUsernameDelete operation.
     * @callback module:api/ChatRoomsApi~orgNameAppNameChatroomsChatroomIdUsersUsernameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Chat Room Member
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} chatroomId 
     * @param {String} username 
     * @param {module:api/ChatRoomsApi~orgNameAppNameChatroomsChatroomIdUsersUsernameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatroomsChatroomIdUsersUsernameDelete = function(orgName, appName, authorization, chatroomId, username, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatroomsChatroomIdUsersUsernameDelete";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatroomsChatroomIdUsersUsernameDelete";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatroomsChatroomIdUsersUsernameDelete";
      }

      // verify the required parameter 'chatroomId' is set
      if (chatroomId == undefined || chatroomId == null) {
        throw "Missing the required parameter 'chatroomId' when calling orgNameAppNameChatroomsChatroomIdUsersUsernameDelete";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameChatroomsChatroomIdUsersUsernameDelete";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'chatroom_id': chatroomId,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatrooms/{chatroom_id}/users/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatroomsChatroomIdUsersUsernamePost operation.
     * @callback module:api/ChatRoomsApi~orgNameAppNameChatroomsChatroomIdUsersUsernamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a Chat Room Member
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} chatroomId 
     * @param {String} username 
     * @param {module:api/ChatRoomsApi~orgNameAppNameChatroomsChatroomIdUsersUsernamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatroomsChatroomIdUsersUsernamePost = function(orgName, appName, authorization, chatroomId, username, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatroomsChatroomIdUsersUsernamePost";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatroomsChatroomIdUsersUsernamePost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatroomsChatroomIdUsersUsernamePost";
      }

      // verify the required parameter 'chatroomId' is set
      if (chatroomId == undefined || chatroomId == null) {
        throw "Missing the required parameter 'chatroomId' when calling orgNameAppNameChatroomsChatroomIdUsersUsernamePost";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameChatroomsChatroomIdUsersUsernamePost";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'chatroom_id': chatroomId,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatrooms/{chatroom_id}/users/{username}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatroomsChatroomIdUsersUsernamesDelete operation.
     * @callback module:api/ChatRoomsApi~orgNameAppNameChatroomsChatroomIdUsersUsernamesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Chat Room Members in Batch
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} chatroomId 
     * @param {String} usernames Separate usernames by &#39;,&#39;
     * @param {module:api/ChatRoomsApi~orgNameAppNameChatroomsChatroomIdUsersUsernamesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatroomsChatroomIdUsersUsernamesDelete = function(orgName, appName, authorization, chatroomId, usernames, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatroomsChatroomIdUsersUsernamesDelete";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatroomsChatroomIdUsersUsernamesDelete";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatroomsChatroomIdUsersUsernamesDelete";
      }

      // verify the required parameter 'chatroomId' is set
      if (chatroomId == undefined || chatroomId == null) {
        throw "Missing the required parameter 'chatroomId' when calling orgNameAppNameChatroomsChatroomIdUsersUsernamesDelete";
      }

      // verify the required parameter 'usernames' is set
      if (usernames == undefined || usernames == null) {
        throw "Missing the required parameter 'usernames' when calling orgNameAppNameChatroomsChatroomIdUsersUsernamesDelete";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'chatroom_id': chatroomId,
        'usernames': usernames
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatrooms/{chatroom_id}/users/{usernames}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatroomsGet operation.
     * @callback module:api/ChatRoomsApi~orgNameAppNameChatroomsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All the Chat Rooms
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {module:api/ChatRoomsApi~orgNameAppNameChatroomsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatroomsGet = function(orgName, appName, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatroomsGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatroomsGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatroomsGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatrooms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatroomsPost operation.
     * @callback module:api/ChatRoomsApi~orgNameAppNameChatroomsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Chat Room
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {module:model/Chatroom} body 
     * @param {module:api/ChatRoomsApi~orgNameAppNameChatroomsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatroomsPost = function(orgName, appName, authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatroomsPost";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatroomsPost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatroomsPost";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling orgNameAppNameChatroomsPost";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatrooms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
