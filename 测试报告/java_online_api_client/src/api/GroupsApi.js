/**
 * Hyphenate REST APIs
 * Hyphenate Server REST API Swagger is designated to provide better documentation and thorough interfaces for testing. For more details about server implementation, request rate limitation, etc, please visit [Hyphenate Server Integration](http://docs.hyphenate.io/v1.0/docs/server-overview).    **Note:**  `org_ID` is the unique ID of the organization created when you first registered [Hyphenate console](https://console.hyphenate.io/).                          `app_name` is the unique app ID created when you new application in [Hyphenate console](https://console.hyphenate.io/).            `Authorization token` is required for most API requests as part of requesting header in the format `Bearer ${token}`. You can obtain the token via [/{org_name}/{app_name}/token](https://docs.hyphenate.io/docs/server-overview#section-request-authentication-token).                                             
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/UserNames', 'model/ModifyGroup', 'model/NewOwner', 'model/Group'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/UserNames'), require('../model/ModifyGroup'), require('../model/NewOwner'), require('../model/Group'));
  } else {
    // Browser globals (root is window)
    if (!root.HyphenateRestApIs) {
      root.HyphenateRestApIs = {};
    }
    root.HyphenateRestApIs.GroupsApi = factory(root.HyphenateRestApIs.ApiClient, root.HyphenateRestApIs.UserNames, root.HyphenateRestApIs.ModifyGroup, root.HyphenateRestApIs.NewOwner, root.HyphenateRestApIs.Group);
  }
}(this, function(ApiClient, UserNames, ModifyGroup, NewOwner, Group) {
  'use strict';

  /**
   * Groups service.
   * @module api/GroupsApi
   * @version 1.0.2
   */

  /**
   * Constructs a new GroupsApi. 
   * @alias module:api/GroupsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsGet operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All the Groups
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsGet = function(orgName, appName, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsGroupIdBlocksUsersGet operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdBlocksUsersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Group Blocked Users
     * Get the blacklist of blocked users. Blocked user cannot see nor receive group message.
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} groupId 
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdBlocksUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsGroupIdBlocksUsersGet = function(orgName, appName, authorization, groupId, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersGet";
      }

      // verify the required parameter 'groupId' is set
      if (groupId == undefined || groupId == null) {
        throw "Missing the required parameter 'groupId' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups/{group_id}/blocks/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsGroupIdBlocksUsersPost operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdBlocksUsersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Block Group Members in Batch
     * Block multiple group members by adding the users to the group blacklist. Max 60 users at a time. Blocked users will receive an event, \&quot;You are kicked out of the group {groupid}\&quot;. Blocked user will not able to see nor receive group message.
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} groupId 
     * @param {module:model/UserNames} body Separate usernames by &#39;,&#39;
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdBlocksUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsGroupIdBlocksUsersPost = function(orgName, appName, authorization, groupId, body, callback) {
      var postBody = body;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersPost";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersPost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersPost";
      }

      // verify the required parameter 'groupId' is set
      if (groupId == undefined || groupId == null) {
        throw "Missing the required parameter 'groupId' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersPost";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersPost";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups/{group_id}/blocks/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsGroupIdBlocksUsersUsernameDelete operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdBlocksUsersUsernameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unblock a Group Member
     * Unblock group member by removing the user from group blacklist. 
     * @param {String} orgName Organization ID
     * @param {String} appName testapp
     * @param {String} authorization Bearer ${token}
     * @param {String} groupId 
     * @param {String} username 
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdBlocksUsersUsernameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsGroupIdBlocksUsersUsernameDelete = function(orgName, appName, authorization, groupId, username, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersUsernameDelete";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersUsernameDelete";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersUsernameDelete";
      }

      // verify the required parameter 'groupId' is set
      if (groupId == undefined || groupId == null) {
        throw "Missing the required parameter 'groupId' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersUsernameDelete";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersUsernameDelete";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'group_id': groupId,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups/{group_id}/blocks/users/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamePost operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Block a Group Member
     * Block a group member by adding the user to the group blacklist.  Blocked user will receive an event, \&quot;You are kicked out of the group {groupid}\&quot;. Blocked user will not able to see nor  receive group message. 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} groupId 
     * @param {String} username 
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamePost = function(orgName, appName, authorization, groupId, username, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamePost";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamePost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamePost";
      }

      // verify the required parameter 'groupId' is set
      if (groupId == undefined || groupId == null) {
        throw "Missing the required parameter 'groupId' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamePost";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamePost";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'group_id': groupId,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups/{group_id}/blocks/users/{username}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamesDelete operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unblock Group Members in Batch
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} groupId 
     * @param {String} usernames Separate usernames by &#39;,&#39;
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamesDelete = function(orgName, appName, authorization, groupId, usernames, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamesDelete";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamesDelete";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamesDelete";
      }

      // verify the required parameter 'groupId' is set
      if (groupId == undefined || groupId == null) {
        throw "Missing the required parameter 'groupId' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamesDelete";
      }

      // verify the required parameter 'usernames' is set
      if (usernames == undefined || usernames == null) {
        throw "Missing the required parameter 'usernames' when calling orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamesDelete";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'group_id': groupId,
        'usernames': usernames
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups/{group_id}/blocks/users/{usernames}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsGroupIdDelete operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Group
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} groupId 
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsGroupIdDelete = function(orgName, appName, authorization, groupId, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsGroupIdDelete";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsGroupIdDelete";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsGroupIdDelete";
      }

      // verify the required parameter 'groupId' is set
      if (groupId == undefined || groupId == null) {
        throw "Missing the required parameter 'groupId' when calling orgNameAppNameChatgroupsGroupIdDelete";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups/{group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsGroupIdPut operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Group Details
     * The message body only allows groupname, description, and maxusers.  Note: Use &#39;+&#39; to replace space if modifying groupname ​and description. E.g., use \&quot;test+group\&quot; instead of \&quot;test group\&quot;.  Warning: If group cannot be found or operation failed, then the response will still return HTTP code 200, but key-value are \&quot;maxusers\&quot;&#x3D;false, \&quot;groupname\&quot;&#x3D;false, and \&quot;description\&quot;&#x3D;false. 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} groupId 
     * @param {module:model/ModifyGroup} body 
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsGroupIdPut = function(orgName, appName, authorization, groupId, body, callback) {
      var postBody = body;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsGroupIdPut";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsGroupIdPut";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsGroupIdPut";
      }

      // verify the required parameter 'groupId' is set
      if (groupId == undefined || groupId == null) {
        throw "Missing the required parameter 'groupId' when calling orgNameAppNameChatgroupsGroupIdPut";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling orgNameAppNameChatgroupsGroupIdPut";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups/{group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsGroupIdUsersGet operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdUsersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a List of Members of Group
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} groupId 
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsGroupIdUsersGet = function(orgName, appName, authorization, groupId, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsGroupIdUsersGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsGroupIdUsersGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsGroupIdUsersGet";
      }

      // verify the required parameter 'groupId' is set
      if (groupId == undefined || groupId == null) {
        throw "Missing the required parameter 'groupId' when calling orgNameAppNameChatgroupsGroupIdUsersGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups/{group_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsGroupIdUsersMembersDelete operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdUsersMembersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove multiple Member from the Group
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token
     * @param {String} groupId 
     * @param {String} members Use &#39;,&#39; to separate usernames
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdUsersMembersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsGroupIdUsersMembersDelete = function(orgName, appName, authorization, groupId, members, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsGroupIdUsersMembersDelete";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsGroupIdUsersMembersDelete";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsGroupIdUsersMembersDelete";
      }

      // verify the required parameter 'groupId' is set
      if (groupId == undefined || groupId == null) {
        throw "Missing the required parameter 'groupId' when calling orgNameAppNameChatgroupsGroupIdUsersMembersDelete";
      }

      // verify the required parameter 'members' is set
      if (members == undefined || members == null) {
        throw "Missing the required parameter 'members' when calling orgNameAppNameChatgroupsGroupIdUsersMembersDelete";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'group_id': groupId,
        'members': members
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups/{group_id}/users/{members}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsGroupIdUsersPost operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdUsersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Multiple Members to Group
     * Warning: Add max 60 members once at a time. 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} groupId 
     * @param {module:model/UserNames} body Separate usernames by &#39;,&#39;
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsGroupIdUsersPost = function(orgName, appName, authorization, groupId, body, callback) {
      var postBody = body;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsGroupIdUsersPost";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsGroupIdUsersPost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsGroupIdUsersPost";
      }

      // verify the required parameter 'groupId' is set
      if (groupId == undefined || groupId == null) {
        throw "Missing the required parameter 'groupId' when calling orgNameAppNameChatgroupsGroupIdUsersPost";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling orgNameAppNameChatgroupsGroupIdUsersPost";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups/{group_id}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsGroupIdUsersUsernameDelete operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdUsersUsernameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Member from the Group
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} groupId 
     * @param {String} username 
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdUsersUsernameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsGroupIdUsersUsernameDelete = function(orgName, appName, authorization, groupId, username, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsGroupIdUsersUsernameDelete";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsGroupIdUsersUsernameDelete";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsGroupIdUsersUsernameDelete";
      }

      // verify the required parameter 'groupId' is set
      if (groupId == undefined || groupId == null) {
        throw "Missing the required parameter 'groupId' when calling orgNameAppNameChatgroupsGroupIdUsersUsernameDelete";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameChatgroupsGroupIdUsersUsernameDelete";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'group_id': groupId,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups/{group_id}/users/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsGroupIdUsersUsernamePost operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdUsersUsernamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a Member to Group
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} groupId 
     * @param {String} username 
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdUsersUsernamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsGroupIdUsersUsernamePost = function(orgName, appName, authorization, groupId, username, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsGroupIdUsersUsernamePost";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsGroupIdUsersUsernamePost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsGroupIdUsersUsernamePost";
      }

      // verify the required parameter 'groupId' is set
      if (groupId == undefined || groupId == null) {
        throw "Missing the required parameter 'groupId' when calling orgNameAppNameChatgroupsGroupIdUsersUsernamePost";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameChatgroupsGroupIdUsersUsernamePost";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'group_id': groupId,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups/{group_id}/users/{username}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsGroupIdsGet operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Group(s) Details
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} groupIds Separate group ID by &#39;,&#39;. e.g. {group_id1},{group_id2}
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsGroupIdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsGroupIdsGet = function(orgName, appName, authorization, groupIds, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsGroupIdsGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsGroupIdsGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsGroupIdsGet";
      }

      // verify the required parameter 'groupIds' is set
      if (groupIds == undefined || groupIds == null) {
        throw "Missing the required parameter 'groupIds' when calling orgNameAppNameChatgroupsGroupIdsGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'group_ids': groupIds
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups/{group_ids}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsGroupidPut operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsGroupidPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Group Owner
     * Transfer group ownership by changing owner. 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} groupid 
     * @param {module:model/NewOwner} body Use the key \&quot;newowner\&quot; and ${new_owner_user} is the username of new group owner
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsGroupidPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsGroupidPut = function(orgName, appName, authorization, groupid, body, callback) {
      var postBody = body;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsGroupidPut";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsGroupidPut";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsGroupidPut";
      }

      // verify the required parameter 'groupid' is set
      if (groupid == undefined || groupid == null) {
        throw "Missing the required parameter 'groupid' when calling orgNameAppNameChatgroupsGroupidPut";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling orgNameAppNameChatgroupsGroupidPut";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'groupid': groupid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups/{groupid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameChatgroupsPost operation.
     * @callback module:api/GroupsApi~orgNameAppNameChatgroupsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Group
     * Group settings: 1. Group name 2. Group description 3. Public vs. Private Group 4. Max number of member (including admin) 5. If public group, allow join freely vs. require permission from admin 6. allowinvites property. If public group, then allowinvites is false. If private group, then allowinvites is true. 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {module:model/Group} body \&quot;desc\&quot;: group description. Note: Use key \&quot;desc\&quot;.                                                                                                                                           public vs. private: group type.                                                                       maxusers: (Optional Attribute, default is 200). The max number of group members.                                     approval: (Optional Attribute, default is true). Does user need permission to join the group?                          owner: The owner (admin) of the group.                                                          members: (Optional Attribute) Group members. Ignore the attribute if no member to be added. The group owner does not represent as a group member. 
     * @param {module:api/GroupsApi~orgNameAppNameChatgroupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameChatgroupsPost = function(orgName, appName, authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameChatgroupsPost";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameChatgroupsPost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameChatgroupsPost";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling orgNameAppNameChatgroupsPost";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/chatgroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
