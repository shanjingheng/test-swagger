/**
 * Hyphenate REST APIs
 * Hyphenate Server REST API Swagger is designated to provide better documentation and thorough interfaces for testing. For more details about server implementation, request rate limitation, etc, please visit [Hyphenate Server Integration](http://docs.hyphenate.io/v1.0/docs/server-overview).    **Note:**  `org_ID` is the unique ID of the organization created when you first registered [Hyphenate console](https://console.hyphenate.io/).                          `app_name` is the unique app ID created when you new application in [Hyphenate console](https://console.hyphenate.io/).            `Authorization token` is required for most API requests as part of requesting header in the format `Bearer ${token}`. You can obtain the token via [/{org_name}/{app_name}/token](https://docs.hyphenate.io/docs/server-overview#section-request-authentication-token).                                             
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/UserNames', 'model/RegisterUsers', 'model/NewPassword', 'model/Nickname'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/UserNames'), require('../model/RegisterUsers'), require('../model/NewPassword'), require('../model/Nickname'));
  } else {
    // Browser globals (root is window)
    if (!root.HyphenateRestApIs) {
      root.HyphenateRestApIs = {};
    }
    root.HyphenateRestApIs.UsersApi = factory(root.HyphenateRestApIs.ApiClient, root.HyphenateRestApIs.UserNames, root.HyphenateRestApIs.RegisterUsers, root.HyphenateRestApIs.NewPassword, root.HyphenateRestApIs.Nickname);
  }
}(this, function(ApiClient, UserNames, RegisterUsers, NewPassword, Nickname) {
  'use strict';

  /**
   * Users service.
   * @module api/UsersApi
   * @version 1.0.2
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the orgNameAppNameUsersDelete operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Users in Batch
     * Delete total number of N user accounts in batch. Recommend set N range 100~500 at a time to ensure the performance. Cannot specified user account in deletion, check the response to see which user accounts are deleted.
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} limit Total number of user accounts to be deleted
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor value from previous deletion (default to )
     * @param {module:api/UsersApi~orgNameAppNameUsersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersDelete = function(orgName, appName, authorization, limit, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersDelete";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersDelete";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersDelete";
      }

      // verify the required parameter 'limit' is set
      if (limit == undefined || limit == null) {
        throw "Missing the required parameter 'limit' when calling orgNameAppNameUsersDelete";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName
      };
      var queryParams = {
        'limit': limit,
        'cursor': opts['cursor']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersGet operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Users in Batch
     * Get a list of users
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {Object} opts Optional parameters
     * @param {String} opts.limit Get specified number of user by setting the batch limit with parameter \&quot;limit\&quot;. Otherwise the API returns the 10 most recent created users by default.  (default to 3)
     * @param {String} opts.cursor Pagination: If the query results more objects than value of limit, then the response will carry an extra attribute “cursor”, the value points to the next page. There is No cursor on the last page or if the returning objects is less than batch limit value. (default to LTgzNDAxMjM3OTpreS0yeXBSSkVlYWZZODl3bXppMTFn&quot;)
     * @param {module:api/UsersApi~orgNameAppNameUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.orgNameAppNameUsersGet = function(orgName, appName, authorization, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName
      };
      var queryParams = {
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersOwnerUsernameBlocksUsersBlockedUsernameDelete operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersOwnerUsernameBlocksUsersBlockedUsernameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unblock User(s)
     * Unblock one or multiple users by removing them from blacklist. Max 60 users at a time. 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} ownerUsername 
     * @param {String} blockedUsername 
     * @param {module:api/UsersApi~orgNameAppNameUsersOwnerUsernameBlocksUsersBlockedUsernameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersOwnerUsernameBlocksUsersBlockedUsernameDelete = function(orgName, appName, authorization, ownerUsername, blockedUsername, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersOwnerUsernameBlocksUsersBlockedUsernameDelete";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersOwnerUsernameBlocksUsersBlockedUsernameDelete";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersOwnerUsernameBlocksUsersBlockedUsernameDelete";
      }

      // verify the required parameter 'ownerUsername' is set
      if (ownerUsername == undefined || ownerUsername == null) {
        throw "Missing the required parameter 'ownerUsername' when calling orgNameAppNameUsersOwnerUsernameBlocksUsersBlockedUsernameDelete";
      }

      // verify the required parameter 'blockedUsername' is set
      if (blockedUsername == undefined || blockedUsername == null) {
        throw "Missing the required parameter 'blockedUsername' when calling orgNameAppNameUsersOwnerUsernameBlocksUsersBlockedUsernameDelete";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'owner_username': ownerUsername,
        'blocked_username': blockedUsername
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{owner_username}/blocks/users/{blocked_username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersOwnerUsernameBlocksUsersGet operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersOwnerUsernameBlocksUsersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a List of Blocked Users
     * Get a List of Blocked Users by the user.
     * @param {String} orgName Organization ID
     * @param {String} appName Application name 
     * @param {String} authorization Bearer ${token}
     * @param {String} ownerUsername The user who is requesting blacklist
     * @param {module:api/UsersApi~orgNameAppNameUsersOwnerUsernameBlocksUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersOwnerUsernameBlocksUsersGet = function(orgName, appName, authorization, ownerUsername, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersOwnerUsernameBlocksUsersGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersOwnerUsernameBlocksUsersGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersOwnerUsernameBlocksUsersGet";
      }

      // verify the required parameter 'ownerUsername' is set
      if (ownerUsername == undefined || ownerUsername == null) {
        throw "Missing the required parameter 'ownerUsername' when calling orgNameAppNameUsersOwnerUsernameBlocksUsersGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'owner_username': ownerUsername
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{owner_username}/blocks/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersOwnerUsernameBlocksUsersPost operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersOwnerUsernameBlocksUsersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Block User(s)
     * Block one or multiple users by adding to blacklist. Blocked user cannot send message.
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} ownerUsername The user who initiated the blocking
     * @param {module:model/UserNames} usernames Users to be blocked. Use &#39;,&#39; to separate the usernames
     * @param {module:api/UsersApi~orgNameAppNameUsersOwnerUsernameBlocksUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersOwnerUsernameBlocksUsersPost = function(orgName, appName, authorization, ownerUsername, usernames, callback) {
      var postBody = usernames;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersOwnerUsernameBlocksUsersPost";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersOwnerUsernameBlocksUsersPost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersOwnerUsernameBlocksUsersPost";
      }

      // verify the required parameter 'ownerUsername' is set
      if (ownerUsername == undefined || ownerUsername == null) {
        throw "Missing the required parameter 'ownerUsername' when calling orgNameAppNameUsersOwnerUsernameBlocksUsersPost";
      }

      // verify the required parameter 'usernames' is set
      if (usernames == undefined || usernames == null) {
        throw "Missing the required parameter 'usernames' when calling orgNameAppNameUsersOwnerUsernameBlocksUsersPost";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'owner_username': ownerUsername
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{owner_username}/blocks/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernameDelete operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Contact from User
     * Remove contact from user&#39;s contact list. 
     * @param {String} orgName Organization ID
     * @param {String} appName_ Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} ownerUsername user
     * @param {String} friendUsername contact to be removed
     * @param {module:api/UsersApi~orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernameDelete = function(orgName, appName_, authorization, ownerUsername, friendUsername, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernameDelete";
      }

      // verify the required parameter 'appName_' is set
      if (appName_ == undefined || appName_ == null) {
        throw "Missing the required parameter 'appName_' when calling orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernameDelete";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernameDelete";
      }

      // verify the required parameter 'ownerUsername' is set
      if (ownerUsername == undefined || ownerUsername == null) {
        throw "Missing the required parameter 'ownerUsername' when calling orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernameDelete";
      }

      // verify the required parameter 'friendUsername' is set
      if (friendUsername == undefined || friendUsername == null) {
        throw "Missing the required parameter 'friendUsername' when calling orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernameDelete";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name ': appName_,
        'owner_username': ownerUsername,
        'friend_username': friendUsername
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{owner_username}/contacts/users/{friend_username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernamePost operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Contact for User
     * Add contact for user. Contact to be added must under the same application as the user.
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} ownerUsername user
     * @param {String} friendUsername contact to be added
     * @param {module:api/UsersApi~orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernamePost = function(orgName, appName, authorization, ownerUsername, friendUsername, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernamePost";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernamePost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernamePost";
      }

      // verify the required parameter 'ownerUsername' is set
      if (ownerUsername == undefined || ownerUsername == null) {
        throw "Missing the required parameter 'ownerUsername' when calling orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernamePost";
      }

      // verify the required parameter 'friendUsername' is set
      if (friendUsername == undefined || friendUsername == null) {
        throw "Missing the required parameter 'friendUsername' when calling orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernamePost";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'owner_username': ownerUsername,
        'friend_username': friendUsername
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{owner_username}/contacts/users/{friend_username}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersOwnerUsernameContactsUsersGet operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersOwnerUsernameContactsUsersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a List of Contacts
     * Get user&#39;s contact list
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} ownerUsername The user who is requesting contact list
     * @param {module:api/UsersApi~orgNameAppNameUsersOwnerUsernameContactsUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersOwnerUsernameContactsUsersGet = function(orgName, appName, authorization, ownerUsername, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersOwnerUsernameContactsUsersGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersOwnerUsernameContactsUsersGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersOwnerUsernameContactsUsersGet";
      }

      // verify the required parameter 'ownerUsername' is set
      if (ownerUsername == undefined || ownerUsername == null) {
        throw "Missing the required parameter 'ownerUsername' when calling orgNameAppNameUsersOwnerUsernameContactsUsersGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'owner_username': ownerUsername
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{owner_username}/contacts/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersOwnerUsernameOfflineMsgCountGet operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersOwnerUsernameOfflineMsgCountGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Offline Message Count
     * Get the number of offline messages
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} ownerUsername 
     * @param {module:api/UsersApi~orgNameAppNameUsersOwnerUsernameOfflineMsgCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersOwnerUsernameOfflineMsgCountGet = function(orgName, appName, authorization, ownerUsername, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersOwnerUsernameOfflineMsgCountGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersOwnerUsernameOfflineMsgCountGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersOwnerUsernameOfflineMsgCountGet";
      }

      // verify the required parameter 'ownerUsername' is set
      if (ownerUsername == undefined || ownerUsername == null) {
        throw "Missing the required parameter 'ownerUsername' when calling orgNameAppNameUsersOwnerUsernameOfflineMsgCountGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'owner_username': ownerUsername
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{owner_username}/offline_msg_count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersPost operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a User
     * Register an IM user account respects to org and app keys.  Note: There&#39;re 2 types of registration, &#39;open&#39; and &#39;authorized&#39;. &#39;open&#39; registration does not require admin authentication, but &#39;authorized&#39; does. See the application -&gt; \&quot;overview\&quot; -&gt; \&quot;User Registration Permission\&quot; in Hyphenate console.  &#39;Authorized&#39; registration is recommended, which prevents malicious attempt to create junk user account from the ones obtained the URL. 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {module:model/RegisterUsers} body To create multiple users at once: [    {        \&quot;username\&quot;: \&quot;user1\&quot;,        \&quot;password\&quot;: \&quot;123456\&quot;    },    {        \&quot;username\&quot;: \&quot;user2\&quot;,        \&quot;password\&quot;: \&quot;123456\&quot;    }]
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Bearer ${token} (default to Bearer YWMtLU9T4JRGEea0-Vvai3EzjAAAAVkGz4dZKNSpsVdRvVix2OfSm42w5-IaUL4)
     * @param {module:api/UsersApi~orgNameAppNameUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersPost = function(orgName, appName, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersPost";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersPost";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling orgNameAppNameUsersPost";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersUsernameActivatePost operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersUsernameActivatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate User Account
     * Activate a deactivated user account. 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} username 
     * @param {module:api/UsersApi~orgNameAppNameUsersUsernameActivatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersUsernameActivatePost = function(orgName, appName, authorization, username, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersUsernameActivatePost";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersUsernameActivatePost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersUsernameActivatePost";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameUsersUsernameActivatePost";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{username}/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersUsernameDeactivatePost operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersUsernameDeactivatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate User Account
     * Deactivate a user account. User will not be able to login. 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} username 
     * @param {module:api/UsersApi~orgNameAppNameUsersUsernameDeactivatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersUsernameDeactivatePost = function(orgName, appName, authorization, username, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersUsernameDeactivatePost";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersUsernameDeactivatePost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersUsernameDeactivatePost";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameUsersUsernameDeactivatePost";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{username}/deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersUsernameDelete operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersUsernameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a User
     * Warning: Delete a user will also delete the group and chat room if the specified user is the admin of the group and chat room. 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} username user to be deleted
     * @param {module:api/UsersApi~orgNameAppNameUsersUsernameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersUsernameDelete = function(orgName, appName, authorization, username, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersUsernameDelete";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersUsernameDelete";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersUsernameDelete";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameUsersUsernameDelete";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersUsernameDisconnectGet operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersUsernameDisconnectGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout User
     * Force logout a user
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} username 
     * @param {module:api/UsersApi~orgNameAppNameUsersUsernameDisconnectGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersUsernameDisconnectGet = function(orgName, appName, authorization, username, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersUsernameDisconnectGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersUsernameDisconnectGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersUsernameDisconnectGet";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameUsersUsernameDisconnectGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{username}/disconnect', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersUsernameGet operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersUsernameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a User
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} username 
     * @param {module:api/UsersApi~orgNameAppNameUsersUsernameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersUsernameGet = function(orgName, appName, authorization, username, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersUsernameGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersUsernameGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersUsernameGet";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameUsersUsernameGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersUsernameJoinedChatgroupsGet operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersUsernameJoinedChatgroupsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a List of Groups of User Joined
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} username 
     * @param {module:api/UsersApi~orgNameAppNameUsersUsernameJoinedChatgroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersUsernameJoinedChatgroupsGet = function(orgName, appName, authorization, username, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersUsernameJoinedChatgroupsGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersUsernameJoinedChatgroupsGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersUsernameJoinedChatgroupsGet";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameUsersUsernameJoinedChatgroupsGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{username}/joined_chatgroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersUsernameJoinedChatroomsGet operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersUsernameJoinedChatroomsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All the Chat Rooms of User Joined
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} username 
     * @param {module:api/UsersApi~orgNameAppNameUsersUsernameJoinedChatroomsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersUsernameJoinedChatroomsGet = function(orgName, appName, authorization, username, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersUsernameJoinedChatroomsGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersUsernameJoinedChatroomsGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersUsernameJoinedChatroomsGet";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameUsersUsernameJoinedChatroomsGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{username}/joined_chatrooms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersUsernameOfflineMsgStatusMsgIdGet operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersUsernameOfflineMsgStatusMsgIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Offline Message Status
     * Get offline message status via message ID. Get message ID via the method get message history.
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} username 
     * @param {String} msgId Message ID
     * @param {module:api/UsersApi~orgNameAppNameUsersUsernameOfflineMsgStatusMsgIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersUsernameOfflineMsgStatusMsgIdGet = function(orgName, appName, authorization, username, msgId, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersUsernameOfflineMsgStatusMsgIdGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersUsernameOfflineMsgStatusMsgIdGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersUsernameOfflineMsgStatusMsgIdGet";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameUsersUsernameOfflineMsgStatusMsgIdGet";
      }

      // verify the required parameter 'msgId' is set
      if (msgId == undefined || msgId == null) {
        throw "Missing the required parameter 'msgId' when calling orgNameAppNameUsersUsernameOfflineMsgStatusMsgIdGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'username': username,
        'msg_id': msgId
      };
      var queryParams = {
      };
      var headerParams = {
        ' Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{username}/offline_msg_status/{msg_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersUsernamePasswordPut operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersUsernamePasswordPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset User&#39;s Password
     * To enhance security, we recommend update user&#39;s Hyphenate IM user account password if the user&#39;s app password on developer server is updated.
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} username 
     * @param {module:model/NewPassword} body Set a new password by using key \&quot;newpassword\&quot;
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Bearer ${token} (default to Bearer YWMtLU9T4JRGEea0-Vvai3EzjAAAAVkGz4dZKNSpsVdRvVix2OfSm42w5-IaUL4)
     * @param {module:api/UsersApi~orgNameAppNameUsersUsernamePasswordPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersUsernamePasswordPut = function(orgName, appName, username, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersUsernamePasswordPut";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersUsernamePasswordPut";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameUsersUsernamePasswordPut";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling orgNameAppNameUsersUsernamePasswordPut";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{username}/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersUsernamePut operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersUsernamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User&#39;s APNs Display Name
     * Update user&#39;s APNs display name for iOS push notification.
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} username 
     * @param {module:model/Nickname} body update APNs display name by key \&quot;nickname\&quot;
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Bearer ${token} (default to Bearer YWMtLU9T4JRGEea0-Vvai3EzjAAAAVkGz4dZKNSpsVdRvVix2OfSm42w5-IaUL4)
     * @param {module:api/UsersApi~orgNameAppNameUsersUsernamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersUsernamePut = function(orgName, appName, username, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersUsernamePut";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersUsernamePut";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameUsersUsernamePut";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling orgNameAppNameUsersUsernamePut";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgNameAppNameUsersUsernameStatusGet operation.
     * @callback module:api/UsersApi~orgNameAppNameUsersUsernameStatusGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Online Status
     * 
     * @param {String} orgName Organization ID
     * @param {String} appName Application name
     * @param {String} authorization Bearer ${token}
     * @param {String} username 
     * @param {module:api/UsersApi~orgNameAppNameUsersUsernameStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orgNameAppNameUsersUsernameStatusGet = function(orgName, appName, authorization, username, callback) {
      var postBody = null;

      // verify the required parameter 'orgName' is set
      if (orgName == undefined || orgName == null) {
        throw "Missing the required parameter 'orgName' when calling orgNameAppNameUsersUsernameStatusGet";
      }

      // verify the required parameter 'appName' is set
      if (appName == undefined || appName == null) {
        throw "Missing the required parameter 'appName' when calling orgNameAppNameUsersUsernameStatusGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling orgNameAppNameUsersUsernameStatusGet";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling orgNameAppNameUsersUsernameStatusGet";
      }


      var pathParams = {
        'org_name': orgName,
        'app_name': appName,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{org_name}/{app_name}/users/{username}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
