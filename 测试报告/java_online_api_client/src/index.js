/**
 * Hyphenate REST APIs
 * Hyphenate Server REST API Swagger is designated to provide better documentation and thorough interfaces for testing. For more details about server implementation, request rate limitation, etc, please visit [Hyphenate Server Integration](http://docs.hyphenate.io/v1.0/docs/server-overview).    **Note:**  `org_ID` is the unique ID of the organization created when you first registered [Hyphenate console](https://console.hyphenate.io/).                          `app_name` is the unique app ID created when you new application in [Hyphenate console](https://console.hyphenate.io/).            `Authorization token` is required for most API requests as part of requesting header in the format `Bearer ${token}`. You can obtain the token via [/{org_name}/{app_name}/token](https://docs.hyphenate.io/docs/server-overview#section-request-authentication-token).                                             
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Cat', 'model/Chatroom', 'model/Group', 'model/ModifyChatroom', 'model/ModifyGroup', 'model/Msg', 'model/MsgContent', 'model/NewOwner', 'model/NewPassword', 'model/Nickname', 'model/RegisterUsers', 'model/Token', 'model/User', 'model/UserName', 'model/UserNames', 'api/AuthenticationApi', 'api/ChatHistoryApi', 'api/ChatRoomsApi', 'api/GroupsApi', 'api/MessagesApi', 'api/UploadAndDownloadFilesApi', 'api/UsersApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Cat'), require('./model/Chatroom'), require('./model/Group'), require('./model/ModifyChatroom'), require('./model/ModifyGroup'), require('./model/Msg'), require('./model/MsgContent'), require('./model/NewOwner'), require('./model/NewPassword'), require('./model/Nickname'), require('./model/RegisterUsers'), require('./model/Token'), require('./model/User'), require('./model/UserName'), require('./model/UserNames'), require('./api/AuthenticationApi'), require('./api/ChatHistoryApi'), require('./api/ChatRoomsApi'), require('./api/GroupsApi'), require('./api/MessagesApi'), require('./api/UploadAndDownloadFilesApi'), require('./api/UsersApi'));
  }
}(function(ApiClient, Cat, Chatroom, Group, ModifyChatroom, ModifyGroup, Msg, MsgContent, NewOwner, NewPassword, Nickname, RegisterUsers, Token, User, UserName, UserNames, AuthenticationApi, ChatHistoryApi, ChatRoomsApi, GroupsApi, MessagesApi, UploadAndDownloadFilesApi, UsersApi) {
  'use strict';

  /**
   * Hyphenate_Server_REST_API_Swagger_is_designated_to_provide_better_documentation_and_thorough_interfaces_for_testing__For_more_details_about_server_implementation_request_rate_limitation_etc_please_visit__Hyphenate_Server_Integration_httpdocs_hyphenate_iov1_0docsserver_overview___Noteorg_ID_is_the_unique_ID_of_the_organization_created_when_you_first_registered__Hyphenate_console_httpsconsole_hyphenate_io__________________________app_name_is_the_unique_app_ID_created_when_you_new_application_in__Hyphenate_console_httpsconsole_hyphenate_io____________Authorization_token_is_required_for_most_API_requests_as_part_of_requesting_header_in_the_format_Bearer_token__You_can_obtain_the_token_via__org_nameapp_nametoken_httpsdocs_hyphenate_iodocsserver_overviewsection_request_authentication_token_____________________________________________.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var HyphenateRestApIs = require('index'); // See note below*.
   * var xxxSvc = new HyphenateRestApIs.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new HyphenateRestApIs.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new HyphenateRestApIs.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new HyphenateRestApIs.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.2
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Cat model constructor.
     * @property {module:model/Cat}
     */
    Cat: Cat,
    /**
     * The Chatroom model constructor.
     * @property {module:model/Chatroom}
     */
    Chatroom: Chatroom,
    /**
     * The Group model constructor.
     * @property {module:model/Group}
     */
    Group: Group,
    /**
     * The ModifyChatroom model constructor.
     * @property {module:model/ModifyChatroom}
     */
    ModifyChatroom: ModifyChatroom,
    /**
     * The ModifyGroup model constructor.
     * @property {module:model/ModifyGroup}
     */
    ModifyGroup: ModifyGroup,
    /**
     * The Msg model constructor.
     * @property {module:model/Msg}
     */
    Msg: Msg,
    /**
     * The MsgContent model constructor.
     * @property {module:model/MsgContent}
     */
    MsgContent: MsgContent,
    /**
     * The NewOwner model constructor.
     * @property {module:model/NewOwner}
     */
    NewOwner: NewOwner,
    /**
     * The NewPassword model constructor.
     * @property {module:model/NewPassword}
     */
    NewPassword: NewPassword,
    /**
     * The Nickname model constructor.
     * @property {module:model/Nickname}
     */
    Nickname: Nickname,
    /**
     * The RegisterUsers model constructor.
     * @property {module:model/RegisterUsers}
     */
    RegisterUsers: RegisterUsers,
    /**
     * The Token model constructor.
     * @property {module:model/Token}
     */
    Token: Token,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The UserName model constructor.
     * @property {module:model/UserName}
     */
    UserName: UserName,
    /**
     * The UserNames model constructor.
     * @property {module:model/UserNames}
     */
    UserNames: UserNames,
    /**
     * The AuthenticationApi service constructor.
     * @property {module:api/AuthenticationApi}
     */
    AuthenticationApi: AuthenticationApi,
    /**
     * The ChatHistoryApi service constructor.
     * @property {module:api/ChatHistoryApi}
     */
    ChatHistoryApi: ChatHistoryApi,
    /**
     * The ChatRoomsApi service constructor.
     * @property {module:api/ChatRoomsApi}
     */
    ChatRoomsApi: ChatRoomsApi,
    /**
     * The GroupsApi service constructor.
     * @property {module:api/GroupsApi}
     */
    GroupsApi: GroupsApi,
    /**
     * The MessagesApi service constructor.
     * @property {module:api/MessagesApi}
     */
    MessagesApi: MessagesApi,
    /**
     * The UploadAndDownloadFilesApi service constructor.
     * @property {module:api/UploadAndDownloadFilesApi}
     */
    UploadAndDownloadFilesApi: UploadAndDownloadFilesApi,
    /**
     * The UsersApi service constructor.
     * @property {module:api/UsersApi}
     */
    UsersApi: UsersApi
  };

  return exports;
}));
