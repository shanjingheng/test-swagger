/**
 * Hyphenate REST APIs
 * Hyphenate Server REST API Swagger is designated to provide better documentation and thorough interfaces for testing. For more details about server implementation, request rate limitation, etc, please visit [Hyphenate Server Integration](http://docs.hyphenate.io/v1.0/docs/server-overview).    **Note:**  `org_ID` is the unique ID of the organization created when you first registered [Hyphenate console](https://console.hyphenate.io/).                          `app_name` is the unique app ID created when you new application in [Hyphenate console](https://console.hyphenate.io/).            `Authorization token` is required for most API requests as part of requesting header in the format `Bearer ${token}`. You can obtain the token via [/{org_name}/{app_name}/token](https://docs.hyphenate.io/docs/server-overview#section-request-authentication-token).                                             
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyphenateRestApIs);
  }
}(this, function(expect, HyphenateRestApIs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyphenateRestApIs.UsersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UsersApi', function() {
    describe('orgNameAppNameUsersDelete', function() {
      it('should call orgNameAppNameUsersDelete successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersDelete
        //instance.orgNameAppNameUsersDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersGet', function() {
      it('should call orgNameAppNameUsersGet successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersGet
        //instance.orgNameAppNameUsersGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersOwnerUsernameBlocksUsersBlockedUsernameDelete', function() {
      it('should call orgNameAppNameUsersOwnerUsernameBlocksUsersBlockedUsernameDelete successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersOwnerUsernameBlocksUsersBlockedUsernameDelete
        //instance.orgNameAppNameUsersOwnerUsernameBlocksUsersBlockedUsernameDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersOwnerUsernameBlocksUsersGet', function() {
      it('should call orgNameAppNameUsersOwnerUsernameBlocksUsersGet successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersOwnerUsernameBlocksUsersGet
        //instance.orgNameAppNameUsersOwnerUsernameBlocksUsersGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersOwnerUsernameBlocksUsersPost', function() {
      it('should call orgNameAppNameUsersOwnerUsernameBlocksUsersPost successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersOwnerUsernameBlocksUsersPost
        //instance.orgNameAppNameUsersOwnerUsernameBlocksUsersPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernameDelete', function() {
      it('should call orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernameDelete successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernameDelete
        //instance.orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernameDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernamePost', function() {
      it('should call orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernamePost successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernamePost
        //instance.orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernamePost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersOwnerUsernameContactsUsersGet', function() {
      it('should call orgNameAppNameUsersOwnerUsernameContactsUsersGet successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersOwnerUsernameContactsUsersGet
        //instance.orgNameAppNameUsersOwnerUsernameContactsUsersGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersOwnerUsernameOfflineMsgCountGet', function() {
      it('should call orgNameAppNameUsersOwnerUsernameOfflineMsgCountGet successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersOwnerUsernameOfflineMsgCountGet
        //instance.orgNameAppNameUsersOwnerUsernameOfflineMsgCountGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersPost', function() {
      it('should call orgNameAppNameUsersPost successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersPost
        //instance.orgNameAppNameUsersPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersUsernameActivatePost', function() {
      it('should call orgNameAppNameUsersUsernameActivatePost successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersUsernameActivatePost
        //instance.orgNameAppNameUsersUsernameActivatePost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersUsernameDeactivatePost', function() {
      it('should call orgNameAppNameUsersUsernameDeactivatePost successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersUsernameDeactivatePost
        //instance.orgNameAppNameUsersUsernameDeactivatePost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersUsernameDelete', function() {
      it('should call orgNameAppNameUsersUsernameDelete successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersUsernameDelete
        //instance.orgNameAppNameUsersUsernameDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersUsernameDisconnectGet', function() {
      it('should call orgNameAppNameUsersUsernameDisconnectGet successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersUsernameDisconnectGet
        //instance.orgNameAppNameUsersUsernameDisconnectGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersUsernameGet', function() {
      it('should call orgNameAppNameUsersUsernameGet successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersUsernameGet
        //instance.orgNameAppNameUsersUsernameGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersUsernameJoinedChatgroupsGet', function() {
      it('should call orgNameAppNameUsersUsernameJoinedChatgroupsGet successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersUsernameJoinedChatgroupsGet
        //instance.orgNameAppNameUsersUsernameJoinedChatgroupsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersUsernameJoinedChatroomsGet', function() {
      it('should call orgNameAppNameUsersUsernameJoinedChatroomsGet successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersUsernameJoinedChatroomsGet
        //instance.orgNameAppNameUsersUsernameJoinedChatroomsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersUsernameOfflineMsgStatusMsgIdGet', function() {
      it('should call orgNameAppNameUsersUsernameOfflineMsgStatusMsgIdGet successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersUsernameOfflineMsgStatusMsgIdGet
        //instance.orgNameAppNameUsersUsernameOfflineMsgStatusMsgIdGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersUsernamePasswordPut', function() {
      it('should call orgNameAppNameUsersUsernamePasswordPut successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersUsernamePasswordPut
        //instance.orgNameAppNameUsersUsernamePasswordPut(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersUsernamePut', function() {
      it('should call orgNameAppNameUsersUsernamePut successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersUsernamePut
        //instance.orgNameAppNameUsersUsernamePut(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameUsersUsernameStatusGet', function() {
      it('should call orgNameAppNameUsersUsernameStatusGet successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameUsersUsernameStatusGet
        //instance.orgNameAppNameUsersUsernameStatusGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
