/**
 * Hyphenate REST APIs
 * Hyphenate Server REST API Swagger is designated to provide better documentation and thorough interfaces for testing. For more details about server implementation, request rate limitation, etc, please visit [Hyphenate Server Integration](http://docs.hyphenate.io/v1.0/docs/server-overview).    **Note:**  `org_ID` is the unique ID of the organization created when you first registered [Hyphenate console](https://console.hyphenate.io/).                          `app_name` is the unique app ID created when you new application in [Hyphenate console](https://console.hyphenate.io/).            `Authorization token` is required for most API requests as part of requesting header in the format `Bearer ${token}`. You can obtain the token via [/{org_name}/{app_name}/token](https://docs.hyphenate.io/docs/server-overview#section-request-authentication-token).                                             
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyphenateRestApIs);
  }
}(this, function(expect, HyphenateRestApIs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyphenateRestApIs.GroupsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GroupsApi', function() {
    describe('orgNameAppNameChatgroupsGet', function() {
      it('should call orgNameAppNameChatgroupsGet successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsGet
        //instance.orgNameAppNameChatgroupsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameChatgroupsGroupIdBlocksUsersGet', function() {
      it('should call orgNameAppNameChatgroupsGroupIdBlocksUsersGet successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsGroupIdBlocksUsersGet
        //instance.orgNameAppNameChatgroupsGroupIdBlocksUsersGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameChatgroupsGroupIdBlocksUsersPost', function() {
      it('should call orgNameAppNameChatgroupsGroupIdBlocksUsersPost successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsGroupIdBlocksUsersPost
        //instance.orgNameAppNameChatgroupsGroupIdBlocksUsersPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameChatgroupsGroupIdBlocksUsersUsernameDelete', function() {
      it('should call orgNameAppNameChatgroupsGroupIdBlocksUsersUsernameDelete successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsGroupIdBlocksUsersUsernameDelete
        //instance.orgNameAppNameChatgroupsGroupIdBlocksUsersUsernameDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamePost', function() {
      it('should call orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamePost successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamePost
        //instance.orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamePost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamesDelete', function() {
      it('should call orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamesDelete successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamesDelete
        //instance.orgNameAppNameChatgroupsGroupIdBlocksUsersUsernamesDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameChatgroupsGroupIdDelete', function() {
      it('should call orgNameAppNameChatgroupsGroupIdDelete successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsGroupIdDelete
        //instance.orgNameAppNameChatgroupsGroupIdDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameChatgroupsGroupIdPut', function() {
      it('should call orgNameAppNameChatgroupsGroupIdPut successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsGroupIdPut
        //instance.orgNameAppNameChatgroupsGroupIdPut(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameChatgroupsGroupIdUsersGet', function() {
      it('should call orgNameAppNameChatgroupsGroupIdUsersGet successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsGroupIdUsersGet
        //instance.orgNameAppNameChatgroupsGroupIdUsersGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameChatgroupsGroupIdUsersMembersDelete', function() {
      it('should call orgNameAppNameChatgroupsGroupIdUsersMembersDelete successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsGroupIdUsersMembersDelete
        //instance.orgNameAppNameChatgroupsGroupIdUsersMembersDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameChatgroupsGroupIdUsersPost', function() {
      it('should call orgNameAppNameChatgroupsGroupIdUsersPost successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsGroupIdUsersPost
        //instance.orgNameAppNameChatgroupsGroupIdUsersPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameChatgroupsGroupIdUsersUsernameDelete', function() {
      it('should call orgNameAppNameChatgroupsGroupIdUsersUsernameDelete successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsGroupIdUsersUsernameDelete
        //instance.orgNameAppNameChatgroupsGroupIdUsersUsernameDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameChatgroupsGroupIdUsersUsernamePost', function() {
      it('should call orgNameAppNameChatgroupsGroupIdUsersUsernamePost successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsGroupIdUsersUsernamePost
        //instance.orgNameAppNameChatgroupsGroupIdUsersUsernamePost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameChatgroupsGroupIdsGet', function() {
      it('should call orgNameAppNameChatgroupsGroupIdsGet successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsGroupIdsGet
        //instance.orgNameAppNameChatgroupsGroupIdsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameChatgroupsGroupidPut', function() {
      it('should call orgNameAppNameChatgroupsGroupidPut successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsGroupidPut
        //instance.orgNameAppNameChatgroupsGroupidPut(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orgNameAppNameChatgroupsPost', function() {
      it('should call orgNameAppNameChatgroupsPost successfully', function(done) {
        //uncomment below and update the code to test orgNameAppNameChatgroupsPost
        //instance.orgNameAppNameChatgroupsPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
